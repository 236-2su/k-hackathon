name: Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x backend/gradlew

      - name: Build backend jar
        working-directory: backend
        run: ./gradlew clean bootJar

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend-dist

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend-jar

      - name: Prepare deployment package
        run: |
          mkdir -p package/frontend package/backend
          cp -r frontend-dist/. package/frontend/
          JAR_FILE=$(ls backend-jar/*.jar | head -n 1)
          cp "$JAR_FILE" package/backend/app.jar
          tar -czf deploy-package.tar.gz -C package .

      - name: Upload bundle to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: deploy-package.tar.gz
          target: ~/deploy

      - name: Run remote deployment steps
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail
            mkdir -p ~/deploy
            cd ~/deploy
            tar -xzf deploy-package.tar.gz
            sudo mkdir -p /srv/app/frontend
            sudo mkdir -p /srv/app/backend
            sudo cp -r frontend/. /srv/app/frontend/
            sudo cp backend/app.jar /srv/app/backend/app.jar
            sudo systemctl restart backend.service
            sudo systemctl reload nginx
